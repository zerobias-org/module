{
  "name": "fix-issue",
  "description": "Diagnose and fix issues in existing module",
  "usage": "/fix-issue <module-identifier> [description]",

  "arguments": [
    {
      "name": "module-identifier",
      "description": "Module identifier in format: vendor-service or vendor-suite-service",
      "required": true,
      "type": "string",
      "pattern": "^[a-z0-9]+-[a-z0-9]+(-[a-z0-9]+)?$",
      "examples": [
        "github-github",
        "amazon-aws-s3",
        "avigilon-alta-access"
      ]
    },
    {
      "name": "description",
      "description": "Optional issue description (if not provided, will run diagnostics)",
      "required": false,
      "type": "string",
      "examples": [
        "\"type error in WebhookProducer\"",
        "\"tests failing\"",
        "\"build error\""
      ]
    }
  ],

  "workflow": {
    "file": "claude/orchestration/workflow-templates/fix-issue-workflow.md",
    "name": "Fix Issue Workflow",
    "summary": "Diagnose → Fix → Validate",
    "duration": "15 min - 2 hours (depends on complexity)",
    "phases": [
      "Phase 1: Issue Identification",
      "Phase 2: Diagnosis",
      "Phase 3: Fix Implementation",
      "Phase 4: Validation",
      "Phase 5: Verification"
    ],
    "gates": "Re-validate affected gates only"
  },

  "issue_types": [
    "build_error",
    "type_error",
    "test_failure",
    "api_spec_error",
    "logic_error",
    "performance_issue",
    "integration_issue"
  ],

  "agents": {
    "diagnostic": [
      "@build-reviewer (build errors)",
      "@typescript-expert (type errors)",
      "@test-orchestrator (test failures)",
      "@api-reviewer (spec errors)",
      "@operation-engineer (logic errors)"
    ],
    "fix": [
      "@typescript-expert (type fixes)",
      "@operation-engineer (logic fixes)",
      "@mapping-engineer (mapper fixes)",
      "@api-architect (spec fixes)",
      "@schema-specialist (schema fixes)",
      "test engineers (test fixes)"
    ],
    "validation": [
      "@gate-controller (overall validation)"
    ]
  },

  "execution": {
    "entrypoint": "orchestrate_fix_issue",
    "strategy": "Diagnose first, then route to specialist",
    "validates": "Only affected gates",
    "outputs": [
      "Issue diagnosed",
      "Fix implemented",
      "Tests passing",
      "Build successful",
      "All affected gates passed"
    ]
  },

  "diagnostic_routing": {
    "contains_typescript": "@typescript-expert",
    "contains_test": "@test-orchestrator",
    "contains_build": "@build-reviewer",
    "contains_api_spec": "@api-reviewer",
    "describes_behavior": "@operation-engineer"
  },

  "examples": [
    {
      "command": "/fix-issue github-github \"type error in WebhookProducer\"",
      "description": "Fix type error in GitHub WebhookProducer",
      "route_to": "@typescript-expert"
    },
    {
      "command": "/fix-issue amazon-aws-s3 \"build failing\"",
      "description": "Fix build failure in AWS S3 module",
      "route_to": "@build-reviewer"
    },
    {
      "command": "/fix-issue avigilon-alta-access",
      "description": "Run diagnostics to identify issue",
      "route_to": "Run all diagnostic agents"
    }
  ],

  "common_issues": [
    {
      "pattern": "Promise<any> in signature",
      "diagnostic_agent": "@typescript-expert",
      "fix_agent": "@typescript-expert",
      "fix": "Import generated type, change Promise<any> to Promise<Type>",
      "affected_gates": [3, 6]
    },
    {
      "pattern": "Tests failing after adding operation",
      "diagnostic_agent": "@test-orchestrator",
      "fix_agent": "@mock-specialist + test engineers",
      "fix": "Update mocks, fix test expectations",
      "affected_gates": [4, 5]
    },
    {
      "pattern": "Build failing with type errors",
      "diagnostic_agent": "@build-reviewer",
      "fix_agent": "@mapping-engineer + @typescript-expert",
      "fix": "Fix mapper return types, verify consistency",
      "affected_gates": [3, 6]
    },
    {
      "pattern": "API spec validation failing",
      "diagnostic_agent": "@api-reviewer",
      "fix_agent": "@api-architect + @schema-specialist",
      "fix": "Fix spec violations, regenerate types, update mappers",
      "affected_gates": [1, 2, 3]
    }
  ],

  "affected_gates": {
    "build_error": [2, 3, 6],
    "type_error": [2, 3, 6],
    "test_error": [4, 5],
    "api_spec_error": [1, 2],
    "logic_error": [3, 4, 5, 6]
  },

  "error_handling": {
    "module_not_found": "Error: Module {module-identifier} not found",
    "cannot_diagnose": "Unable to diagnose automatically, manual investigation needed",
    "fix_failed": "Fix attempted but validation still failing, escalate to user"
  },

  "success_criteria": [
    "Issue identified and diagnosed",
    "Fix implemented",
    "All affected gates pass",
    "No regressions introduced",
    "Tests passing",
    "Build successful"
  ],

  "verification_steps": [
    "Run full test suite",
    "Run full build",
    "Manual testing (if applicable)",
    "Check for side effects"
  ]
}
